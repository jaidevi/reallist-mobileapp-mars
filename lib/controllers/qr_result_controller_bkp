import 'package:back_button_interceptor/back_button_interceptor.dart';
import 'package:flutter/material.dart';
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:reallist/screens/home.dart';
import 'package:url_launcher/url_launcher.dart';

import '../models/check_list_model.dart';
import '../services/remote_service.dart';
import '../utils/helper.dart';

class QrResultController extends GetxController with WidgetsBindingObserver {
  final formKey = GlobalKey<FormBuilderState>();
  RxList formList = [].obs;
  dynamic qrID;
  dynamic formRespon;
  RxBool isLoading = false.obs;
  RxBool isIntentOn = false.obs;

  var loginDetails = GetStorage().read("gs_login_data") != ''
      ? GetStorage().read("gs_login_data")
      : '';

  @override
  void onInit() {
    super.onInit();
    WidgetsBinding.instance.addObserver(this);
    BackButtonInterceptor.add(myInterceptor);
  }

  bool myInterceptor(bool stopDefaultButtonEvent, RouteInfo info) {
    Get.offAll(Home());
    return true;
  }

  void receiveData(result) {
    //qrID = result.code;
    qrID = result;
    getCheckListForm();
  }

  void getCheckListForm() async {
    try {
      isLoading(true);
      var response = await RemoteService().getCheckListForm(qrID);
      //var response = 'okay';
      print("-----------> ${response.body}");
      if (response != null) {
        //var result = jsonDecode(response.body);
        //var result = sampleData;
        formList.clear();
        formList.value = formListFromJson(response.body);
        update();
      } else {
        ScaffoldMessenger.of(Get.context!)
          ..hideCurrentSnackBar()
          ..showSnackBar(
            Helper().snackBar("On Snap !", "something went to wrong"),
          );
        isLoading(false);
      }
    } catch (err) {
      ScaffoldMessenger.of(Get.context!)
        ..hideCurrentSnackBar()
        ..showSnackBar(
          Helper().snackBar("On Snap !", "something went to wrong"),
        );
      isLoading(false);
    }
  }

  void getFormBrow(id) async {
    try {
      //isIntentOn.value = true;
      final Uri toLaunch = Uri(
        scheme: 'https',
        host: 'checklist.medicall.in',
        path: '/view/checklist/$id/${loginDetails["token"]}',
      );
      print("scan url --------> $toLaunch");
      if (!await launchUrl(
        toLaunch,
        mode: LaunchMode.inAppWebView,
        webViewConfiguration: const WebViewConfiguration(
            headers: <String, String>{'my_header_key': 'my_header_value'}),
      )) {
        throw Exception('Could not launch $toLaunch');
      }
    } catch (e) {
      print("----------> $e");
    }
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed) {
      print("<------------------------> Resumed");
      print(isIntentOn.value);
      if (isIntentOn.isTrue) {
        print("if condition true ---------->");
        isIntentOn(false);
        print(isIntentOn);
        Get.offAll(Home());
      }
    }
    if (state == AppLifecycleState.detached) {
      print("<------------------------> Detached");
    }
    if (state == AppLifecycleState.inactive) {
      print("<------------------------> Inactive");
    }
    if (state == AppLifecycleState.paused) {
      print("<------------------------> Paused");
      isIntentOn(true);
    }
  }

  @override
  void onClose() {
    super.onClose();
    WidgetsBinding.instance.removeObserver(this);
    BackButtonInterceptor.remove(myInterceptor);
  }
}
